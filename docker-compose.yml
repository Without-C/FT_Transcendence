services:
  nginx:
    build: ./proxy
    image: proxy
    container_name: proxy
    ports:
      - "4433:443"
    volumes:
      - proxy-log:/var/log/nginx
      - ${PWD}/frontend:/usr/share/nginx/html
    depends_on:
      frontend:
        condition: service_healthy
      backend-user:
        condition: service_healthy
      backend-ping-pong:
        condition: service_healthy
      backend-blockchain:
        condition: service_healthy
      kibana:
        condition: service_healthy
    init: true

  frontend:
    build: ./frontend
    image: frontend
    container_name: frontend
    volumes:
      - ${PWD}/frontend:/app
      - /app/node_modules
    healthcheck:
      test: wget -qO- http://frontend:5173/
      interval: 10s
      timeout: 10s
      retries: 5
    init: true

  backend-user:
    build: ./backend-user
    image: backend-user
    container_name: backend-user
    volumes:
      - backend-user-log:/var/log/backend-user
      - ${PWD}/backend-user:/app
      - /app/node_modules
    environment:
      - OAUTH_UID_42=${OAUTH_UID_42}
      - OAUTH_SECRET_42=${OAUTH_SECRET_42}
      - OAUTH_REDIRECT_42=${OAUTH_REDIRECT_42}
      - OAUTH_UID_GITHUB=${OAUTH_UID_GITHUB}
      - OAUTH_SECRET_GITHUB=${OAUTH_SECRET_GITHUB}
      - OAUTH_REDIRECT_GITHUB=${OAUTH_REDIRECT_GITHUB}
      - FRONTEND_URL=${FRONTEND_URL}
      - DATABASE_URL=${DATABASE_URL}
      - SECRET=${SECRET}
    healthcheck:
      test: wget -qO- http://127.0.0.1:3000/healthcheck
      interval: 10s
      timeout: 10s
      retries: 5
    init: true

  backend-ping-pong:
    build: ./backend-ping-pong
    image: backend-ping-pong
    container_name: backend-ping-pong
    volumes:
      - backend-ping-pong-log:/var/log/backend-ping-pong
      - ${PWD}/backend-ping-pong:/app
      - /app/node_modules
    environment:
      - ALLOW_CONCURRENT_GAMES=${ALLOW_CONCURRENT_GAMES}
    healthcheck:
      test: wget -qO- http://127.0.0.1:3000/healthcheck
      interval: 10s
      timeout: 10s
      retries: 5
    init: true

  backend-blockchain:
    build: ./backend-blockchain
    image: backend-blockchain
    container_name: backend-blockchain
    volumes:
      - backend-blockchain-log:/var/log/backend-blockchain
      - ${PWD}/backend-blockchain:/app
      - /app/node_modules
    healthcheck:
      test: wget -qO- http://127.0.0.1:3000/healthcheck
      interval: 10s
      timeout: 10s
      retries: 5
    init: true

  logstash:
    image: docker.elastic.co/logstash/logstash:8.17.2
    container_name: logstash
    volumes:
      - ${PWD}/elk/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ${PWD}/elk/logstash/backend-user.conf:/usr/share/logstash/pipeline/backend-user.conf
      - ${PWD}/elk/logstash/backend-ping-pong.conf:/usr/share/logstash/pipeline/backend-ping-pong.conf
      - ${PWD}/elk/logstash/backend-blockchain.conf:/usr/share/logstash/pipeline/backend-blockchain.conf
      - ${PWD}/elk/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - proxy-log:/var/log/nginx
      - backend-user-log:/var/log/backend-user
      - backend-ping-pong-log:/var/log/backend-ping-pong
      - backend-blockchain-log:/var/log/backend-blockchain
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    depends_on:
      elasticsearch:
        condition: service_healthy
    init: true

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.2
    container_name: elasticsearch
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - node.store.allow_mmap=false
    volumes:
      - ${PWD}/elk/elasticsearch/docker-entrypoint.sh:/usr/local/bin/my-docker-entrypoint.sh:ro
    entrypoint: [ "/usr/local/bin/my-docker-entrypoint.sh" ]
    healthcheck:
      test: [ "CMD", "curl", "-k", "https://localhost:9200" ]
      interval: 30s
      timeout: 10s
      retries: 5
    init: true

  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.2
    container_name: kibana
    volumes:
      - ${PWD}/elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - ${PWD}/elk/kibana/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh:ro
      - ${PWD}/elk/kibana/dashboard-proxy.ndjson:/elk/kibana/dashboard-proxy.ndjson:ro
      - ${PWD}/elk/kibana/dashboard-backend.ndjson:/elk/kibana/dashboard-backend.ndjson:ro
    environment:
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=none
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/kibana/api/status"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      elasticsearch:
        condition: service_healthy
    entrypoint: [ "/usr/local/bin/docker-entrypoint.sh" ]
    init: true

volumes:
  proxy-log:
  backend-user-log:
  backend-ping-pong-log:
  backend-blockchain-log:
